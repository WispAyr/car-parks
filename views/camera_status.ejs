<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Camera Status & Metrics</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', Arial, sans-serif; background: #f5f5f5; margin: 0; }
        .container { max-width: 1200px; margin: 40px auto; background: #fff; border-radius: 12px; box-shadow: 0 4px 16px rgba(0,0,0,0.08); padding: 32px; }
        h1 { font-size: 2.2rem; margin-bottom: 24px; text-align: center; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 28px; }
        .cam-box { background: #f8fafc; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.06); padding: 22px 18px 18px 18px; position: relative; }
        .cam-title { font-size: 1.2rem; font-weight: 700; margin-bottom: 8px; }
        .status-dot { display: inline-block; width: 16px; height: 16px; border-radius: 50%; margin-right: 8px; vertical-align: middle; }
        .status-green { background: #22c55e; }
        .status-yellow { background: #facc15; }
        .status-red { background: #ef4444; }
        .metrics { margin-top: 10px; font-size: 1.05rem; }
        .metrics span { display: inline-block; min-width: 120px; }
        .interval { color: #6366f1; font-weight: 500; }
        .thresholds { font-size: 0.95em; color: #888; margin-top: 6px; }
        @media (max-width: 700px) { .container { padding: 8px; } }
    </style>
</head>
<body>
    <div class="container">
        <h1>Camera Status & Metrics</h1>
        <div class="grid">
            <% cameraStats.forEach(cam => { %>
                <div class="cam-box">
                    <div class="cam-title">
                        <span class="status-dot status-<%= cam.status %>"></span>
                        <%= cam.name || cam.cameraId %>
                    </div>
                    <div><strong>Last Detection:</strong> <span class="js-datetime"><%= cam.lastDetection || 'Never' %></span></div>
                    <div class="metrics">
                        <span><strong>Last Hour:</strong> <%= cam.lastHour %></span>
                        <span><strong>Last Day:</strong> <%= cam.lastDay %></span>
                        <span><strong>Last 30d:</strong> <%= cam.lastMonth %></span>
                    </div>
                    <div class="metrics">
                        <span><strong>Day 24h:</strong> <%= cam.day24h %></span>
                        <span><strong>Night 24h:</strong> <%= cam.night24h %></span>
                    </div>
                    <div class="metrics">
                        <span><strong>Day 30d:</strong> <%= cam.day30d %></span>
                        <span><strong>Night 30d:</strong> <%= cam.night30d %></span>
                    </div>
                    <div class="metrics">
                        <span class="interval"><strong>Avg Interval:</strong> <%= cam.avgInterval ? cam.avgInterval.toFixed(1) + ' min' : 'N/A' %></span>
                    </div>
                    <div class="thresholds">
                        <span>Green ≤ <%= Math.round(cam.greenLimit) %> min</span> | 
                        <span>Yellow ≤ <%= Math.round(cam.yellowLimit) %> min</span>
                    </div>
                    <div style="margin-top:10px;">
                        <canvas class="sparkline" width="120" height="28" data-points="<%= cam.sparkline.join(',') %>"></canvas>
                        <div style="font-size:0.9em;color:#888;text-align:right;">last 24h</div>
                    </div>
                </div>
            <% }) %>
        </div>
    </div>
    <script src="/js/utils.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.js-datetime').forEach(el => {
                if (el.textContent !== 'Never') {
                    el.textContent = formatDateTime(el.textContent);
                }
            });
            // Draw sparklines
            document.querySelectorAll('.sparkline').forEach(canvas => {
                const ctx = canvas.getContext('2d');
                const points = canvas.dataset.points.split(',').map(Number);
                const w = canvas.width, h = canvas.height;
                const max = Math.max(...points, 1);
                ctx.clearRect(0, 0, w, h);
                ctx.strokeStyle = '#6366f1';
                ctx.lineWidth = 2;
                ctx.beginPath();
                points.forEach((v, i) => {
                    const x = i * (w / (points.length - 1));
                    const y = h - (v / max) * (h - 4) - 2;
                    if (i === 0) ctx.moveTo(x, y);
                    else ctx.lineTo(x, y);
                });
                ctx.stroke();
                // Optionally, draw dots
                ctx.fillStyle = '#6366f1';
                points.forEach((v, i) => {
                    const x = i * (w / (points.length - 1));
                    const y = h - (v / max) * (h - 4) - 2;
                    ctx.beginPath();
                    ctx.arc(x, y, 2, 0, 2 * Math.PI);
                    ctx.fill();
                });
            });
        });
    </script>
</body>
</html> 